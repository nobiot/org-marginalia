[[file:https://img.shields.io/badge/License-GPLv3-blue.svg]]

#+TITLE: Org-marginalia

#+PROPERTY: LOGGING nil

# Note: I use the readme template that alphapapa shares on his GitHub repo <https://github.com/alphapapa/emacs-package-dev-handbook#template>. It works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

Org-marginalia lets you highlight text, and write margin notes (marginalia) for any text file in a separate Org file. 

[[./resources/images/2020-12-24T101116_Title.png]]
*Figure 1*. Left: Org-mode with text enlarged; Right marginalia file with the inline image display on.  

* Screenshots

Refer to the screenshots below for a teaser of  what it can do.

[[./resources/images/2020-12-22T141331-OM-screen-shot-01.png]]
*Figure 2*. Left: main note with some text highlighted in green; Right: margin notes in a marginalia file

[[./resources/images/2020-12-22T141331-OM-screen-shot-02.png]]
*Figure 3*. It automatically adds the standard Org Mode link to margin notes, so it works well with Org-roam's backlinks

[[./resources/images/2020-12-22T141331-OM-screen-shot-03.png]]
*Figure 4*. Main note can be any text files. Left: an ~.el~ file with a highlight; Right: marginalia file

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings
:END:
:CONTENTS:
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#customizing][Customizing]]
- [[#text-properties-not-overlays][Text-properties, Not Overlays]]
- [[#known-limitations][Known Limitations]]
- [[#changelog][Changelog]]
- [[#credits][Credits]]
- [[#feedback][Feedback]]
- [[#license][License]]
- [[#marginalia-for-org-marginaliael][Marginalia for org-marginalia.el]]
  - [[#na][na]]
  - [[#fer-each-highlight][fer each highlight]]
  - [[#org-marginalia-open][org-marginalia-open]]
  - [[#or][or]]
  - [[#interactive][(interactive]]
  - [[#push][push]]
:END:

* Installation
:PROPERTIES:
:TOC:      :depth 0
:END:

** Manual
This package is not available on MELPA. Manual installation is required.

Ensure to have Org Mode 9.4 or later (tested on 9.4.2). This package uses ~org-collect-keywords~, which does not exist in an earlier version.

Store =org-marginalia.el= in your load-path, and put this in your init file:

#+BEGIN_SRC emacs-lisp
(require 'org-marginalia)
#+END_SRC

For example, I use this in my init file. Org-marginalia is a local minor mode. As I want to activate it automatically for all my text-mode files (Org and Markdown), I also put ~org-marginalia-mode 1~ in ~text-mode-hook~ like this below.

#+begin_src emacs-lisp
(add-hook 'after-init-hook (lambda()
                             (add-to-list 'load-path "~/local-repos/org-marginalia/")
                             (require 'org-marginalia)
                             (add-hook 'text-mode-hook #'org-marginalia-mode 1)))
#+end_src
  
* Usage
:PROPERTIES:
:TOC:      :depth 0
:END:

** Commands
- =org-marginalia-mode= ::
Org-marginalia is a local minor mode. Toggle it on/off with using =org-marginalia-mode=. On activating, it loads your saved highlights from the marginalia file (defined by =org-marginalia-notes-file-path=), and enables automatic saving of highlights. The automatic saving is achieved via function =org-marginalia-save= added to =after-save-hook=.

- =org-marginalia-mark= ::
Select a region of text, and call =org-marginalia-mark= to highlight the region. It will generate a new ID, and start tracking the location -- so you can edit text around the highlighted text. Do not cut, copy and paste as the highlight will disappear and it is a bit tricky to recover it. To create a new margin note entry in the marginalia file, save the buffer.

- =org-marginalia-save= ::
By default, Org-marginalia automatically creates or updates corresponding entries in the marginalia file with location and text of highlights on saving the buffer. Nevertheless, you can manually call =org-marginalia-save= to do so (automatic process also call this command).

- =org-marginalia-open= ::
Move your cursor on the highlighted text, and call =org-marginalia-open= to open the relevant margin notes in a separate window. Your cursor will move to the marginalia buffer narrowed to the relevant margin notes entry. You can edit the marginalia buffer as a normal Org buffer. Once you have done editing, you may simply save and close the it (kill it or close the window) as per your normal workflow. Technically, the marginalia buffer is a cloned indirect buffer of the marginalia file. 

- =org-marginalia-load= ::
This command visits the marginalia file and loads the saved highlights onto the current buffer. If there is no margin notes for it, it will output a message in the echo. Highlights tracked locally by Org-marginalia cannot persist when you kill the buffer, or quit Emacs. When you re-launch Emacs, ensure to turn on =org-marginalia-mode= to load the highlights. Loading is automatically done when you activate the minor mode.

- =org-marginalia-remove= ::
This command removes the highlight at point. It will remove the highlight, and remove the properties from the marginalia, but will keep the headline and notes in tact. 

- =org-marginalia-next= ::
Move to the next highlight if any. If there is none below the cursor, and there is a highlight above, loop back to the top one.
If the point has moved to the next highlight, this function enables transient map with `set-transient-map'. You don't have to press the keybinding prefix again to move further to the next. That is, you can do a key sequence like this:

   =C-c n ] ] ] ]=

If you have the same prefix for `org-marginalia-prev', you can combine it in
the sequence like so:

  =C-c n ] ] [ [=
  This lets your cursor back to where you started (next next prev prev)

- =org-marginalia-prev= ::
Move to the previous highlight if any. If there is none above the cursor, and there is a highlight below, loop back to the bottom one. This function enables transient map. See =org-marginalia-next= for detail.

- =org-marginalia-toggle= ::
Toggle showing/hiding of highlighters in current buffer. It only affects the display of the highlighters. When hidden, highlights' locations are still kept tracked; thus, upon buffer-save the correct locations are still recorded in the marginalia file.

** Keybindings Examples

`Org-marginalia` only provides its mode map, and does not bind any keys to it. As an example, you coud do something like this below.

#+begin_src emacs-lisp
(define-key org-marginalia-mode-map (kbd "C-c n o") #'org-marginalia-open)
(define-key org-marginalia-mode-map (kbd "C-c m") #'org-marginalia-mark)
(define-key org-marginalia-mode-map (kbd "C-c n ]") #'org-marginalia-next)
(define-key org-marginalia-mode-map (kbd "C-c n [") #'org-marginalia-prev)
#+end_src

** Composing Personal Workflow

Currently only "elementary" functions are defined in the package; for example,  =mark= , =save=, and =open= are all separate functions. You can string these together to compose a more fluid operation to suite your own workflow. A very useful set of such chained commands have been suggesetd by holtzermann17 in [[https://org-roam.discourse.group/t/prototype-org-marginalia-write-margin-notes-with-org-mode/1080/10][Org-roam's Discourse discussion]] (adjusted to reflect the change of the prefix from =om/= to =org-marginalia-=) .

I will try to incorporate these into the package when I have more time to focus on it -- I find them useful, but there are some plans I have had, and want to think of how I can incoprate these suggestions better with my ideas. 

#+begin_src emacs-lisp
  (defun org-marginalia-make-annotation ()
    (interactive)
    (let ((mark-end (region-end)))
      (org-marginalia-mark (region-beginning) (region-end))
      (org-marginalia-save)
      (org-marginalia-open (1- mark-end))
      (end-of-buffer)))

  (define-key org-marginalia-mode-map (kbd "C-c M")
    #'org-marginalia-make-annotation)

  (defun org-marginalia-browse-forward ()
    (interactive)
    (let ((buf (current-buffer)))
      (org-marginalia-next) (org-marginalia-open (point))
      (pop-to-buffer buf nil t)))

  (define-key org-marginalia-mode-map (kbd "C-c n }")
    #'org-marginalia-browse-forward)

  (defun org-marginalia-browse-backward ()
    (interactive)
    (let ((buf (current-buffer)))
      (org-marginalia-prev) (org-marginalia-open (point))
      (pop-to-buffer buf nil t)))

  (define-key org-marginalia-mode-map (kbd "C-c n {")
    #'org-marginalia-browse-backward)
#+end_src

* Customizing

- You can customize settings in the =org-marginalia= group.
- Highlight's face can be changed via =org-marginalia-highlighter=
- Marginalia file is defined by =org-marginalia-notes-file-path=

* Text-properties, Not Overlays

Technically, Org-marginalia implements the highlighting feature solely with text properties, and avoids overlays. This is done in light of oft-mentioned performance degradation with the latter.

Personally I have never experienced such performance issues with overlays; nevertheless, given that we might have many highlighted text regions in a single file, I thought I would take this as an opportunity to take advantage of text properties.

* Known Limitations

- Turning off minor mode does not turn off the highlights :: This should not do any harm, but if you are distracted, kill the buffer (not revert) and visit it again. Toggling show/hide of highlights is something I would like to add later.
- Copy & pasting loses highlights :: You could manually recover it by adjusting the properties in the margin notes file.
- Undo highlight does not undo it :: Highlight a region of text with =org-marginalia-mark= and immediately undo it. The highlight disappears, but it is still being tracked with =org-marginalia-highlights=.
- Moving source files and marginalia file :: Move your files and marginalia file to another directory does not update the source path recorded in the marginalia file. It will be confusing. Try not to do this.

* Changelog
:PROPERTIES:
:TOC:      :depth 0
:END:

** Curent; WIP
- fix: Add highlighter face def for termianl

** 0.0.5
- break: Replace the prefix "om/" in the source code with "org-marginalia"
- break: Remove default keybindings; add examples in readme instead. Addresses [#3](https://github.com/nobiot/org-marginalia/issues/3)

** 0.0.4
- feat: Add transient navigation to next/prev
  See [[*Credits][§ Credits]] for the piece of code to achieve the transient map I used.

** 0.0.3
- feat: Add om/toggle for show/hide highlighters

** 0.0.2
- feat: Add om/next and /prev
- break: Change om/open-at-point to org-marginalia-open
- break: Change om/save-all to org-marginalia-save

** 0.0.1
Initial alpha release. I consider it to be the minimal viable scope. 

* Credits

To create this package, I was inspired by the following packages. I did not copy any part of them, but borrowed some ideas from them -- e.g. saving the margin notes in a separate file.

- [[https://github.com/jkitchin/ov-highlight][Ov-highlight]] :: John Kitchin's (author of Org-ref). Great UX for markers with hydra. Saves the marker info and comments directly within the Org file as Base64 encoded string. It uses overlays with using `ov` package.
  
- [[https://github.com/bastibe/annotate.el][Annotate.el]] :: Bastian Bechtold's (author of Org-journal). Unique display of annotations right next to (or on top of) the text. It seems to be designed for very short annotations, and perhaps for code review (programming practice); I have seen recent issues reported when used with variable-pitch fonts (prose).
  
- [[https://github.com/tkf/org-mode/blob/master/contrib/lisp/org-annotate-file.el][Org-annotate-file]] :: Part of Org's contrib library. It seems to be designed to annotate a whole file in a separate Org file, rather than specific text items.
  
- [[https://github.com/IdoMagal/ipa.el][InPlaceAnnotations (ipa-mode)]] :: It looks similar to Annotate.el above.
  
- Transient navigation feature :: To implement the transient navigation feature, I liberally copied the relevant code from a wonderful Emacs package, [[https://github.com/rnkn/binder/blob/24d55db236fea2b405d4bdc69b4c33d0f066059c/binder.el#L658-L665][Binder]] by Paul W. Rankin (GitHub user [[https://github.com/rnkn][rnkn]]). 

* Feedback

Feedback welcome in this repo, or in [[https://org-roam.discourse.group/t/prototype-org-marginalia-write-margin-notes-with-org-mode/1080][Org-roam Discourse forum]]. 

*Edit*: Now the features 1 & 2 have been implemented... I want to add a little more, to attend to the known limitations to see if I can remove some of them.

I am aiming to keep this package to be small and focused. I plan to add the following features, and probably consider it to be feature complete for my purposes.

1. DONE v0.0.3  =om/toggle= to toggle show/hide of highlights without losing them
2. DONE =om/next= and =om/prev= to easily navigate highlighted regions in the buffer
     This is done (v0.0.2), but I would like to try a transient (don't want to repeat the prefix everytime): transient done with v0.0.4.
   
* License

This work is licensed under a GPLv3 license. For a full copy of the licese, refer to [[./LICENSE][LICENSE]].

* Marginalia for ~org-marginalia.el~
:PROPERTIES:
:marginalia-source-file: ~/local-repos/org-marginalia/org-marginalia.el
:END:
This section is used as a demonstration and a collection of my ideas for this package.


** na
:PROPERTIES:
:marginalia-id: 0dba860c
:marginalia-source-beg: 18258
:marginalia-source-end: 18260
:END:
[[file:~/local-repos/org-marginalia/org-marginalia.el][org-marginalia]]

I need to think it through.
Do I want to reveal invisible elments to move, or keep it hidden.
At the moment, ~om/list-highlights-positions~ has been changed to return beginning points of visible ones only -- this can be changed to make it opsitonal arg. For example, if I want to list *all*, including the hidden ones, do I want to just visible ones?

** fer each highlight
:PROPERTIES:
:marginalia-id: b3c8f14e
:marginalia-source-beg: 10224
:marginalia-source-end: 10243
:END:
[[file:~/local-repos/org-marginalia/org-marginalia.el][org-marginalia]]

Some syntactic elements keep their faces descpite being marked.
It appears to be the way font-lock-mode works. Experimenting.
This might also lead to a way for copy and paste (need to deal with duplicate IDs)
#+begin_src 
;; Comment dddd
;; This is considered
;; Comment

;;Comment  dd
jit-lock-register

(defun)

(jit-lock-register #'my/font-lock-fn)
(font-lock-unfontify-buffer)
(jit-lock-refontify)
(font-lock-fontify-buffer)

(point);; comment
;; Comment 
(my/font-lock-fn 155 160)

(let ((beg 1)
      (end 10))
  (list beg end))

(defun my/font-lock-fn (beg end &optional context)
  (unless context
    (list beg)
    (if (get-char-property beg 'om/id)
        (font-lock-unfontify-region beg end))))
#+end_src



** org-marginalia-open
:PROPERTIES:
:marginalia-id: 6855620d
:marginalia-source-beg: 14624
:marginalia-source-end: 14643
:END:
[[file:~/local-repos/org-marginalia/org-marginalia.el][org-marginalia]]
** or
:PROPERTIES:
:marginalia-id: 44cb5515
:marginalia-source-beg: 30475
:marginalia-source-end: 30477
:END:
[[file:~/local-repos/org-marginalia/org-marginalia.el][org-marginalia]]

[[file:test/copy.org][See the test file]].
Halfway there. Need:
- Copy = duplicate ID
- Clean up the unID'ed hightlights variable elements
- Integrate with font lock system
** (interactive
:PROPERTIES:
:marginalia-id: 368a41a8
:marginalia-source-beg: 15089
:marginalia-source-end: 15101
:END:
[[file:~/local-repos/org-marginalia/org-marginalia.el][org-marginalia]]
** DONE push
[[file:~/local-repos/org-marginalia/org-marginalia.el][org-marginalia]]

This does not check the duplicates, and keeps adding elements.
* COMMENT Local Variables

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# line-spacing: 4
# End:
